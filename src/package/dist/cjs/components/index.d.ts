export default ImageUploader;
declare class ImageUploader extends React.Component<any, any, any> {
    constructor(props: any);
    state: {
        pictures: any[];
        files: never[];
        fileErrors: never[];
    };
    inputElement: string;
    onDropFile(e: any): void;
    onUploadClick(e: any): void;
    triggerFileUpload(): void;
    childRef: React.RefObject<any>;
    componentDidUpdate(prevProps: any, prevState: any, snapshot: any): void;
    hasExtension(fileName: any): boolean;
    readFile(file: any): Promise<any>;
    removeImage(picture: any): void;
    renderErrors(): React.JSX.Element[];
    renderIcon(): React.JSX.Element | undefined;
    renderLabel(): React.JSX.Element | undefined;
    renderPreview(): React.JSX.Element;
    renderPreviewPicturesSortable(): React.JSX.Element;
    renderPreviewPictures(): React.JSX.Element[];
    displayModal(picture: any, index: any): void;
    setPictures(props: any): void;
    clearPictures(): void;
    render(): React.JSX.Element;
}
declare namespace ImageUploader {
    namespace defaultProps {
        const className: string;
        const fileContainerStyle: {};
        const buttonClassName: string;
        const buttonStyles: {};
        const withPreview: boolean;
        const accept: string;
        const name: string;
        const withIcon: boolean;
        const buttonType: string;
        const withLabel: boolean;
        const label: string;
        const labelStyles: {};
        const labelClass: string;
        const imgExtension: string[];
        const maxFileSize: number;
        const fileSizeError: string;
        const fileTypeError: string;
        const errorClass: string;
        const style: {};
        const errorStyle: {};
        const singleImage: boolean;
        function onChange(): void;
        const defaultImages: never[];
        const crop: boolean;
        const isSortable: boolean;
    }
    namespace propTypes {
        const style_1: PropTypes.Requireable<object>;
        export { style_1 as style };
        const fileContainerStyle_1: PropTypes.Requireable<object>;
        export { fileContainerStyle_1 as fileContainerStyle };
        const className_1: PropTypes.Requireable<string>;
        export { className_1 as className };
        const onChange_1: PropTypes.Requireable<(...args: any[]) => any>;
        export { onChange_1 as onChange };
        export const onDelete: PropTypes.Requireable<(...args: any[]) => any>;
        const buttonClassName_1: PropTypes.Requireable<string>;
        export { buttonClassName_1 as buttonClassName };
        const buttonStyles_1: PropTypes.Requireable<object>;
        export { buttonStyles_1 as buttonStyles };
        const buttonType_1: PropTypes.Requireable<string>;
        export { buttonType_1 as buttonType };
        const withPreview_1: PropTypes.Requireable<boolean>;
        export { withPreview_1 as withPreview };
        const accept_1: PropTypes.Requireable<string>;
        export { accept_1 as accept };
        const name_1: PropTypes.Requireable<string>;
        export { name_1 as name };
        const withIcon_1: PropTypes.Requireable<boolean>;
        export { withIcon_1 as withIcon };
        const withLabel_1: PropTypes.Requireable<boolean>;
        export { withLabel_1 as withLabel };
        const label_1: PropTypes.Requireable<string>;
        export { label_1 as label };
        const labelStyles_1: PropTypes.Requireable<object>;
        export { labelStyles_1 as labelStyles };
        const labelClass_1: PropTypes.Requireable<string>;
        export { labelClass_1 as labelClass };
        const imgExtension_1: PropTypes.Requireable<any[]>;
        export { imgExtension_1 as imgExtension };
        const maxFileSize_1: PropTypes.Requireable<number>;
        export { maxFileSize_1 as maxFileSize };
        const fileSizeError_1: PropTypes.Requireable<string>;
        export { fileSizeError_1 as fileSizeError };
        const fileTypeError_1: PropTypes.Requireable<string>;
        export { fileTypeError_1 as fileTypeError };
        const errorClass_1: PropTypes.Requireable<string>;
        export { errorClass_1 as errorClass };
        const errorStyle_1: PropTypes.Requireable<object>;
        export { errorStyle_1 as errorStyle };
        const singleImage_1: PropTypes.Requireable<boolean>;
        export { singleImage_1 as singleImage };
        const defaultImages_1: PropTypes.Requireable<any[]>;
        export { defaultImages_1 as defaultImages };
        const crop_1: PropTypes.Requireable<boolean>;
        export { crop_1 as crop };
        const isSortable_1: PropTypes.Requireable<boolean>;
        export { isSortable_1 as isSortable };
    }
}
import React from 'react';
import PropTypes from 'prop-types';
